#include <bits/stdc++.h>
using namespace std;

int prec(char op){
    if(op=='^') return 3;
    if(op=='*'||op=='/') return 2;
    if(op=='+'||op=='-') return 1;
    return 0;
}
bool rightAssoc(char op){ return op=='^'; }

string infixToPostfix(string s){
    string out; stack<char> st;
    for(char c:s){
        if(isalnum(c)) out+=c;
        else if(c=='(') st.push(c);
        else if(c==')'){
            while(!st.empty() && st.top()!='('){ out+=st.top(); st.pop(); }
            if(!st.empty()) st.pop();
        }else if(strchr("+-*/^",c)){
            while(!st.empty() && strchr("+-*/^",st.top()) &&
                (prec(st.top())>prec(c) || (prec(st.top())==prec(c)&&!rightAssoc(c)))){
                out+=st.top(); st.pop();
            }
            st.push(c);
        }
    }
    while(!st.empty()){ out+=st.top(); st.pop(); }
    return out;
}

int main(){
    string s="(A+B)*C-D^E^F";
    cout<<"Infix:   "<<s<<"\n";
    cout<<"Postfix: "<<infixToPostfix(s)<<"\n";
}
/*output - 
Infix:   (A+B)*C-D^E^F
Postfix: AB+C*DEF^^-
*/
